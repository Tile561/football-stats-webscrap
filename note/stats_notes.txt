
stats = ["summary","defense","passing","gca","possession","passing_types","keeper"]


def make_matchlog_links(player_urls, years, stats):
    links = {stat: [] for stat in stats}
    for url in player_urls:
        parts = url.strip("/").split("/")
        player_id = parts[-2]      # "dea698d9"
        player_slug = parts[-1]    # "Erling-Haaland"
        
        for year in years:   
            for stat in stats:
                matchlog_url = f"https://fbref.com/en/players/{player_id}/matchlogs/{year}/{stat}/{player_slug}-Match-Logs"
                links[stat].append({
                    "name": f"{player_slug} - {stat}",
                    "url": matchlog_url})
    return links

general_matchlog_links = []
general_matchlog_links = make_matchlog_links(player_links, years,stats)

print(general_matchlog_links)

match_logs = []


import pandas as pd 
pd.set_option('display.max_columns', None)


match_logs = []
match_logs = combine_data(years, general_matchlog_links, table_id="matchlogs_all")

match_logs_df = pd.concat(match_logs, ignore_index=True)
match_logs_df.head()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import pandas as pd
pd.set_option('display.max_columns', None)

# general_matchlog_links looks like { "passing": [...], "shooting": [...], ... }

dfs_by_stat = {}

for stat, links in general_matchlog_links.items():
    # combine all links for this specific stat
    match_logs = combine_data(years, links, table_id="matchlogs_all")

    # concatenate into a DataFrame
    dfs_by_stat[stat] = pd.concat(match_logs, ignore_index=True)

# Now you can access each stat DataFrame separately
passing_df = dfs_by_stat["passing"]
shooting_df = dfs_by_stat["shooting"]
keeper_df = dfs_by_stat["keeper"]
standard_df = dfs_by_stat['summary']
passing_types_df = dfs_by_stat['passing_types']
defense_df = dfs_by_stat['defense']
gca_df = dfs_by_stat['gca']
possession_df = dfs_by_stat['possession']


print(passing_df.head())

